function [z]=precoasc(r,param,noei,lint,p_unity,...
    xy, ww, nov, x,wx,y,wy,xx,jacx,yy,jacy,...
    Aq1, wwq1, linte, nove, nvle,...
    Ac, Acb, wwc, r0t,lista_coarse,noec,novc,lintc,ldirc);
% PRECOASC Solves the linear system P_as z= r where P_as is the additive Schwarz prec.
%
% P_as is the additive Schwarz preconditioner with overlapping elements and
%   coarse mesh (Sect. 6.3.3, CHQZ3)
%
% [z]=precoasc(r,param,noei,lint,p_unity,...
%    xy, ww, nov, x,wx,y,wy,xx,jacx,yy,jacy,...
%    Aq1, wwq1, linte, nove, nvle,...
%    Ac, Acb, wwc, r0t,lista_coarse,noec,novc,lintc,ldirc);
%
% Input : r = column array, r.h.s. of the linear system to solve
%         param = array of parameters
%         noei = number of  nodes internal to Omega
%         lint = list of internal nodes (set in liste.n)
%         p_untity = unity partition for extended decomposition, set in partition_e.m
%         xy = 2-indexes array wiht coordinates of 2D LGL mesh     
%         ww = mass matrix (in column array)
%         nov = local -global map, previously generated by cosnov_2d
%         x = npdx LGL nodes in [-1,1],
%            (produced by calling [x,wx]=xwlgl(npdx))
%         wx= npdx LGL weigths in [-1,1],
%            (produced by calling [x,wx]=xwlgl(npdx))
%         y = npdx LGL nodes in [-1,1],
%            (produced by calling [y,wy]=xwlgl(npdy))
%         wy= npdx LGL weigths in [-1,1],
%            (produced by calling [y,wy]=xwlgl(npdy))
%         xx = 2-indexes array of size (4,ne)
%            xx(1:4,ie)=[x_V1_ie;x_V2_ie;x_V3_ie;x_V4_ie]
%            (ne=nex*ney is the global number of spectral elements)
%         jacx = array (length(jacx)=ne); jacx(ie)= (x_V2_ie-x_V1_ie)/2
%         yy = 2-indexes array of size (4,ne):
%            yy(1:4,ie)=[y_V1_ie;y_V2_ie;y_V3_ie;y_V4_ie]
%         jacy = array (length(jacy)=ne); jacy(ie)= (x_V3_ie-x_V1_ie)/2
%         Aq1 = cell array with Q1 stiffness matrices (internal/internal nodes) 
%               on extended elements
%         wwq1 = cell array with Q1 mass matrices (internal nodes) 
%                on extended elements
%         linte = cell array with list of internal nodes of extended
%                 elements
%         nove = 2-index array of "extended local" to global map, permuted.
%         nvle = 2-index array:
%                 nvle (:,1)=number of nodes of the extendend elements
%                 nvle (:,2)=number of Q1 elements of the extendend elements
%                            along x-direction
%                 nvle (:,3)=number of Q1 elements of the extendend elements
%                            along y-direction
%        Ac =  Cholesky factor of the Q1 stiffness matrix 
%               (internal/internal nodes) on the coarse mesh
%        Acb = Q1 stiffness matrix (internal/boundary nodes) 
%               on the coarse mesh
%        wwc = Q1 mass matrix (internal nodes) 
%                on the coarse mesh
%        r0t =  matrix R_H^T
%        lista_coarse = list of nodes of Omega wich are nodes of the coarse mesh
%        noec = number of nodes of the coarse mesh
%        novc(4,ne) = it maps each macro-Q1 element on the coarse mesh Q1
%        lintc = lista of internal nodes of the coarse mesh
%        ldirc = lista of boudanry nodes of the coarse mesh
%
% Output: z= column array with the solution of P_as z= r
 
%
% References: CHQZ2 = C. Canuto, M.Y. Hussaini, A. Quarteroni, T.A. Zang,
%                    "Spectral Methods. Fundamentals in Single Domains"
%                    Springer Verlag, Berlin Heidelberg New York, 2006.
%             CHQZ3 = C. Canuto, M.Y. Hussaini, A. Quarteroni, T.A. Zang,
%                    "Spectral Methods. Evolution to Complex Geometries 
%                     and Applications to Fluid DynamicsSpectral Methods"
%                    Springer Verlag, Berlin Heidelberg New York, 2007.

%   Written by Paola Gervasio
%   $Date: 2007/04/01$

nx=param(13);npdx=nx+1;
ny=param(14); npdy=ny+1;
mn=npdx*npdy;
nex=param(15); ney=param(16);ne=nex*ney;
noe=length(xy);

rb=zeros(noe,1);
rb(lint)=r; 
z=zeros(noei,1);

% local solver
for ie=1:ne
listaie=linte{ie}; mne=nvle(ie,1);
Aloc=Aq1{ie};

r0=rb(nove(1:mne,ie));
r0=r0(listaie);
z0=(Aloc\(Aloc'\r0)); 

% solution expansion on the global mesh
zc=zeros(mne,1);
zc(listaie)=z0;
zb=zeros(noe,1);
zb(nove(1:mne,ie))=zc;
z=z+zb(lint);
end

clear Aloc;

% solver on the coarse mesh
rb=zeros(noe,1);
rb(lint)=r;
rb=rb.*p_unity;
r0=r0t'*rb;
r0i=r0(lintc)-(Acb*r0(ldirc));
z0i=(Ac\(Ac'\(r0i))); 
z0=r0;z0(lintc)=z0i;
zc=r0t*z0;
zc=zc.*p_unity;
z=z+zc(lint);
return
