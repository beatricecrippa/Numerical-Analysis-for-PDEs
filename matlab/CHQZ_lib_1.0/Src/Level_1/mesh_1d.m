function[xx,jacx,xy,ww]=mesh_1d(xa,xb,ne,npdx,nov,x,wx)
% MESH_1D   Generates uniform 1D Spectral elements mesh
%
%  [xx,xy,jacx,ww]=mesh_1d(xa,xb,ne,npdx,nov,x,wx)
%
% Input: xa,xb= extrema of computational domain Omega=(xa,xb)
%        ne = number of elements
%        npdx = number of nodes in each element (the same in every element)
%        nov = local -global map, previously generated by cosnov1d
%        x = LGL nodes in [-1,1], previously generated by xwlgl
%        wx = LGL weigths in [-1,1], previously generated by xwlgl
%
% Output: xx = 2-indexes array of size (2,ne): xx(1:2,ie)=[xa_ie;xb_ie]
%         jacx = array (length(jacx)=ne); jacx(ie)= jacobian of 
%                of the map F_ie:[-1,1]---->[xa_ie,xb_ie]
%         xy = column array with global mesh, length: noe=nov(npdx,ne)
%         ww = column array with global weigths, length: noe=nov(npdx,ne)
%              diag(ww) is the mass matrix associated to SEM discretization
%
% Reference: CHQZ2 = C. Canuto, M.Y. Hussaini, A. Quarteroni, T.A. Zang,
%                    "Spectral Methods. Fundamentals in Single Domains"
%                    Springer Verlag, Berlin Heidelberg New York, 2006.

%   Written by Paola Gervasio
%   $Date: 2007/04/01$

noe=nov(npdx,ne);

xy=zeros(noe,1); ww=zeros(noe,1); jacx=zeros(ne,1);
xx=zeros(2,ne);
H=(xb-xa)/ne;
for ie=1:ne
xb_ie=xa+ie*H;
xa_ie=xb_ie-H;
xx(1:2,ie)=[xa_ie;xb_ie];
jacx(ie)=.5*(xb_ie-xa_ie);
for i=1:npdx
xy(nov(i,ie))=x(i)*jacx(ie)+.5*(xb_ie+xa_ie);
ww(nov(i,ie))=ww(nov(i,ie))+wx(i)*jacx(ie);
end
end


